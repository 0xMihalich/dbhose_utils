name: Build wheels and create release

on:
  push:
    tags: ["v*"]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install cibuildwheel
      run: pip install git+https://github.com/pypa/cibuildwheel.git

    - name: Install ONLY cibuildwheel dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cython setuptools wheel
      shell: bash

    - name: Create setup.py with explicit include_dirs
      run: |
        cat > setup.py << 'EOF'
        from setuptools import setup, Extension
        from Cython.Build import cythonize
        import os
        import site
        import subprocess
        import sys

        # Принудительно устанавливаем nativelib в текущее окружение
        try:
            import nativelib
        except ImportError:
            print("nativelib not found, installing...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", "nativelib"])

        # Получаем пути к nativelib
        import nativelib
        nativelib_path = os.path.dirname(nativelib.__file__)
        print(f"nativelib path: {nativelib_path}")

        include_dirs = [nativelib_path, '.']

        extensions = [
            Extension(
                "dbhose_utils.common",
                ["src/dbhose_utils/common.pyx"],
                include_dirs=include_dirs,
            )
        ]

        setup(
            ext_modules=cythonize(
                extensions,
                compiler_directives={
                    'language_level': "3",
                }
            ),
        )
        EOF
      shell: bash

    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheel_prebuild
      env:
        CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-*"
        CIBW_ARCHS_MACOS: "x86_64 arm64"
        CIBW_ENVIRONMENT: "PYTHONPATH=$PYTHONPATH:$(python -c 'import site; print(\":\".join(site.getsitepackages()))')"
        CIBW_BEFORE_ALL: "python -m pip install --upgrade pip"
        CIBW_BEFORE_BUILD: "pip install cython setuptools wheel -r requirements.txt"
        CIBW_SKIP: "*-win32 *-musllinux*"
        CIBW_ARCHS_WINDOWS: "AMD64"
        CIBW_BEFORE_ALL_WINDOWS: "pip install nativelib"
        CIBW_ENVIRONMENT_WINDOWS: "PYTHONPATH=$PYTHONPATH:$(python -c 'import site; print(\":\".join(site.getsitepackages() + [site.getusersitepackages()]))')"
        CIBW_BEFORE_BUILD_WINDOWS: "pip install cython setuptools wheel -r requirements.txt"

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: wheel_prebuild/*.whl

  create_release:
    name: Create Release with wheels
    runs-on: ubuntu-latest
    needs: build_wheels
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release_wheels

    - name: List all wheels
      run: find release_wheels -name "*.whl" | sort

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release_wheels/**/*.whl
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
